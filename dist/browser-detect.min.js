!function(e,n){"function"==typeof define&&define.amd?define([],n):"object"==typeof exports?module.exports=n():e.browser=n()}(this,function(){"use strict";function e(e){if(void 0===e&&"undefined"==typeof process)throw"Please give navigator.\n> browser(navigator or window.navigator)";return"undefined"!=typeof process?{name:"node",version:process.version.slice(1)}:[["edge",/Edge\/([0-9\._]+)/],["yandexbrowser",/YaBrowser\/([0-9\._]+)/],["chrome",/(?!Chrom.*OPR)Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/],["crios",/CriOS\/([0-9\.]+)(:?\s|$)/],["firefox",/Firefox\/([0-9\.]+)(?:\s|$)/],["opera",/Opera\/([0-9\.]+)(?:\s|$)/],["opera",/OPR\/([0-9\.]+)(:?\s|$)$/],["ie",/Trident\/7\.0.*rv\:([0-9\.]+)\).*Gecko$/],["ie",/MSIE\s([0-9\.]+);.*Trident\/[4-7].0/],["ie",/MSIE\s(7\.0)/],["bb10",/BB10;\sTouch.*Version\/([0-9\.]+)/],["android",/Android\s([0-9\.]+)/],["ios",/Version\/([0-9\._]+).*Mobile.*Safari.*/],["safari",/Version\/([0-9\._]+).*Safari/]].filter(function(n){return n[1].test(e.userAgent)}).map(function(n){var r=n[1].exec(e.userAgent),o=r&&r[1].split(/[._]/).slice(0,3);return o&&o.length<3&&Array.prototype.push.apply(o,1===o.length?[0,0]:[0]),{name:n[0],version:o.join(".")}}).shift()}var n,r,o,t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};return function(e){function i(e,n){return S.call(e,n)}function f(e,n){var r,o,t,i,f,u,s,c,l,p,a,d,y=n&&n.split("/"),m=w.map,h=m&&m["*"]||{};if(e){for(e=e.split("/"),f=e.length-1,w.nodeIdCompat&&j.test(e[f])&&(e[f]=e[f].replace(j,"")),"."===e[0].charAt(0)&&y&&(d=y.slice(0,y.length-1),e=d.concat(e)),l=0;l<e.length;l++)if("."===(a=e[l]))e.splice(l,1),l-=1;else if(".."===a){if(0===l||1===l&&".."===e[2]||".."===e[l-1])continue;l>0&&(e.splice(l-1,2),l-=2)}e=e.join("/")}if((y||h)&&m){for(r=e.split("/"),l=r.length;l>0;l-=1){if(o=r.slice(0,l).join("/"),y)for(p=y.length;p>0;p-=1)if((t=m[y.slice(0,p).join("/")])&&(t=t[o])){i=t,u=l;break}if(i)break;!s&&h&&h[o]&&(s=h[o],c=l)}!i&&s&&(i=s,u=c),i&&(r.splice(0,u,i),e=r.join("/"))}return e}function u(n,r){return function(){var o=A.call(arguments,0);return"string"!=typeof o[0]&&1===o.length&&o.push(null),m.apply(e,o.concat([n,r]))}}function s(e){return function(n){return f(n,e)}}function c(e){return function(n){v[e]=n}}function l(n){if(i(b,n)){var r=b[n];delete b[n],x[n]=!0,y.apply(e,r)}if(!i(v,n)&&!i(x,n))throw new Error("No "+n);return v[n]}function p(e){var n,r=e?e.indexOf("!"):-1;return r>-1&&(n=e.substring(0,r),e=e.substring(r+1,e.length)),[n,e]}function a(e){return e?p(e):[]}function d(e){return function(){return w&&w.config&&w.config[e]||{}}}var y,m,h,g,v={},b={},w={},x={},S=Object.prototype.hasOwnProperty,A=[].slice,j=/\.js$/;h=function(e,n){var r,o=p(e),t=o[0],i=n[1];return e=o[1],t&&(t=f(t,i),r=l(t)),t?e=r&&r.normalize?r.normalize(e,s(i)):f(e,i):(e=f(e,i),o=p(e),t=o[0],e=o[1],t&&(r=l(t))),{f:t?t+"!"+e:e,n:e,pr:t,p:r}},g={require:function(e){return u(e)},exports:function(e){var n=v[e];return void 0!==n?n:v[e]={}},module:function(e){return{id:e,uri:"",exports:v[e],config:d(e)}}},y=function(n,r,o,f){var s,p,d,y,m,w,S,A=[],j=void 0===o?"undefined":t(o);if(f=f||n,w=a(f),"undefined"===j||"function"===j){for(r=!r.length&&o.length?["require","exports","module"]:r,m=0;m<r.length;m+=1)if(y=h(r[m],w),"require"===(p=y.f))A[m]=g.require(n);else if("exports"===p)A[m]=g.exports(n),S=!0;else if("module"===p)s=A[m]=g.module(n);else if(i(v,p)||i(b,p)||i(x,p))A[m]=l(p);else{if(!y.p)throw new Error(n+" missing "+p);y.p.load(y.n,u(f,!0),c(p),{}),A[m]=v[p]}d=o?o.apply(v[n],A):void 0,n&&(s&&s.exports!==e&&s.exports!==v[n]?v[n]=s.exports:d===e&&S||(v[n]=d))}else n&&(v[n]=o)},n=r=m=function(n,r,o,t,i){if("string"==typeof n)return g[n]?g[n](r):l(h(n,a(r)).f);if(!n.splice){if(w=n,w.deps&&m(w.deps,w.callback),!r)return;r.splice?(n=r,r=o,o=null):n=e}return r=r||function(){},"function"==typeof o&&(o=t,t=i),t?y(e,n,r,o):setTimeout(function(){y(e,n,r,o)},4),m},m.config=function(e){return m(e)},n._defined=v,o=function(e,n,r){if("string"!=typeof e)throw new Error("See almond README: incorrect module build, no module name");n.splice||(r=n,n=[]),i(v,e)||i(b,e)||(b[e]=[e,n,r])},o.amd={jQuery:!0}}(),o("almond",function(){}),void 0===Array.prototype.map&&(Array.prototype.map=function(e){for(var n=[],r=0,o=this.length;r<o;r++)n.push(e(this[r]));return n}),void 0===Array.prototype.filter&&(Array.prototype.filter=function(e){for(var n=[],r=0,o=this.length;r<o;r++)e(this[r])&&n.push(this[r]);return n}),o("polyfills",function(){}),o("browser-detect",["polyfills"],function(){return e}),o("main",["browser-detect"],function(e){return function(){var n="undefined"!=typeof window?window.navigator:n;return e(n)}}),window.browser=r("main")});
//# sourceMappingURL=data:application/json;charset=utf8;base64,

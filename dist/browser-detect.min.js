!function(e,r){"function"==typeof define&&define.amd?define([],r):"object"==typeof exports?module.exports=r():e.browser=r()}(this,function(){"use strict";function e(e){if(void 0===e){if("undefined"!=typeof process)return{name:"node",version:process.version.slice(1)};throw"Please give user-agent.\n> browser(navigator.userAgent or res.headers['user-agent'])."}return[["edge",/Edge\/([0-9\._]+)/],["yandexbrowser",/YaBrowser\/([0-9\._]+)/],["chrome",/(?!Chrom.*OPR)Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/],["crios",/CriOS\/([0-9\.]+)(:?\s|$)/],["firefox",/Firefox\/([0-9\.]+)(?:\s|$)/],["opera",/Opera\/([0-9\.]+)(?:\s|$)/],["opera",/OPR\/([0-9\.]+)(:?\s|$)$/],["ie",/Trident\/7\.0.*rv\:([0-9\.]+)\).*Gecko$/],["ie",/MSIE\s([0-9\.]+);.*Trident\/[4-7].0/],["ie",/MSIE\s(7\.0)/],["bb10",/BB10;\sTouch.*Version\/([0-9\.]+)/],["android",/Android\s([0-9\.]+)/],["ios",/Version\/([0-9\._]+).*Mobile.*Safari.*/],["safari",/Version\/([0-9\._]+).*Safari/]].filter(function(r){return r[1].test(e)}).map(function(r){var n=r[1].exec(e),t=n&&n[1].split(/[._]/).slice(0,3),o=Array.prototype.slice.call(t,1).join("")||"0";return t&&t.length<3&&Array.prototype.push.apply(t,1===t.length?[0,0]:[0]),{name:r[0],version:t.join("."),versionNumber:parseFloat(t[0]+"."+o)}}).shift()}var r,n,t,o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};return function(e){function i(e,r){return A.call(e,r)}function f(e,r){var n,t,o,i,f,u,s,c,l,p,a,d,y=r&&r.split("/"),m=w.map,h=m&&m["*"]||{};if(e){for(e=e.split("/"),f=e.length-1,w.nodeIdCompat&&j.test(e[f])&&(e[f]=e[f].replace(j,"")),"."===e[0].charAt(0)&&y&&(d=y.slice(0,y.length-1),e=d.concat(e)),l=0;l<e.length;l++)if("."===(a=e[l]))e.splice(l,1),l-=1;else if(".."===a){if(0===l||1===l&&".."===e[2]||".."===e[l-1])continue;l>0&&(e.splice(l-1,2),l-=2)}e=e.join("/")}if((y||h)&&m){for(n=e.split("/"),l=n.length;l>0;l-=1){if(t=n.slice(0,l).join("/"),y)for(p=y.length;p>0;p-=1)if((o=m[y.slice(0,p).join("/")])&&(o=o[t])){i=o,u=l;break}if(i)break;!s&&h&&h[t]&&(s=h[t],c=l)}!i&&s&&(i=s,u=c),i&&(n.splice(0,u,i),e=n.join("/"))}return e}function u(r,n){return function(){var t=S.call(arguments,0);return"string"!=typeof t[0]&&1===t.length&&t.push(null),m.apply(e,t.concat([r,n]))}}function s(e){return function(r){return f(r,e)}}function c(e){return function(r){v[e]=r}}function l(r){if(i(b,r)){var n=b[r];delete b[r],x[r]=!0,y.apply(e,n)}if(!i(v,r)&&!i(x,r))throw new Error("No "+r);return v[r]}function p(e){var r,n=e?e.indexOf("!"):-1;return n>-1&&(r=e.substring(0,n),e=e.substring(n+1,e.length)),[r,e]}function a(e){return e?p(e):[]}function d(e){return function(){return w&&w.config&&w.config[e]||{}}}var y,m,h,g,v={},b={},w={},x={},A=Object.prototype.hasOwnProperty,S=[].slice,j=/\.js$/;h=function(e,r){var n,t=p(e),o=t[0],i=r[1];return e=t[1],o&&(o=f(o,i),n=l(o)),o?e=n&&n.normalize?n.normalize(e,s(i)):f(e,i):(e=f(e,i),t=p(e),o=t[0],e=t[1],o&&(n=l(o))),{f:o?o+"!"+e:e,n:e,pr:o,p:n}},g={require:function(e){return u(e)},exports:function(e){var r=v[e];return void 0!==r?r:v[e]={}},module:function(e){return{id:e,uri:"",exports:v[e],config:d(e)}}},y=function(r,n,t,f){var s,p,d,y,m,w,A,S=[],j=void 0===t?"undefined":o(t);if(f=f||r,w=a(f),"undefined"===j||"function"===j){for(n=!n.length&&t.length?["require","exports","module"]:n,m=0;m<n.length;m+=1)if(y=h(n[m],w),"require"===(p=y.f))S[m]=g.require(r);else if("exports"===p)S[m]=g.exports(r),A=!0;else if("module"===p)s=S[m]=g.module(r);else if(i(v,p)||i(b,p)||i(x,p))S[m]=l(p);else{if(!y.p)throw new Error(r+" missing "+p);y.p.load(y.n,u(f,!0),c(p),{}),S[m]=v[p]}d=t?t.apply(v[r],S):void 0,r&&(s&&s.exports!==e&&s.exports!==v[r]?v[r]=s.exports:d===e&&A||(v[r]=d))}else r&&(v[r]=t)},r=n=m=function(r,n,t,o,i){if("string"==typeof r)return g[r]?g[r](n):l(h(r,a(n)).f);if(!r.splice){if(w=r,w.deps&&m(w.deps,w.callback),!n)return;n.splice?(r=n,n=t,t=null):r=e}return n=n||function(){},"function"==typeof t&&(t=o,o=i),o?y(e,r,n,t):setTimeout(function(){y(e,r,n,t)},4),m},m.config=function(e){return m(e)},r._defined=v,t=function(e,r,n){if("string"!=typeof e)throw new Error("See almond README: incorrect module build, no module name");r.splice||(n=r,r=[]),i(v,e)||i(b,e)||(b[e]=[e,r,n])},t.amd={jQuery:!0}}(),t("almond",function(){}),void 0===Array.prototype.map&&(Array.prototype.map=function(e){for(var r=[],n=0,t=this.length;n<t;n++)r.push(e(this[n]));return r}),void 0===Array.prototype.filter&&(Array.prototype.filter=function(e){for(var r=[],n=0,t=this.length;n<t;n++)e(this[n])&&r.push(this[n]);return r}),t("polyfills",function(){}),t("browser-detect",["polyfills"],function(){return e}),t("main",["browser-detect"],function(e){return function(r){var n;if(void 0===r){var t="undefined"!=typeof window?window.navigator:t;n=void 0===t?void 0:t.userAgent}else n=r;return e(n)}}),n("main")});
//# sourceMappingURL=data:application/json;charset=utf8;base64,

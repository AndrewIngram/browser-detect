!function(e,r){"function"==typeof define&&define.amd?define([],r):"object"==typeof exports?module.exports=r():e.browser=r()}(this,function(){"use strict";function e(e){if(void 0===e){if("undefined"!=typeof process){var r=process.version.slice(1).split(".").slice(0,3),n=Array.prototype.slice.call(r,1).join("")||"0";return{name:"node",version:r.join("."),versionNumber:parseFloat(r[0]+"."+n)}}throw"Please give user-agent.\n> browser(navigator.userAgent or res.headers['user-agent'])."}return[["edge",/Edge\/([0-9\._]+)/],["yandexbrowser",/YaBrowser\/([0-9\._]+)/],["chrome",/(?!Chrom.*OPR)Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/],["crios",/CriOS\/([0-9\.]+)(:?\s|$)/],["firefox",/Firefox\/([0-9\.]+)(?:\s|$)/],["opera",/Opera\/([0-9\.]+)(?:\s|$)/],["opera",/OPR\/([0-9\.]+)(:?\s|$)$/],["ie",/Trident\/7\.0.*rv\:([0-9\.]+)\).*Gecko$/],["ie",/MSIE\s([0-9\.]+);.*Trident\/[4-7].0/],["ie",/MSIE\s(7\.0)/],["bb10",/BB10;\sTouch.*Version\/([0-9\.]+)/],["android",/Android\s([0-9\.]+)/],["ios",/Version\/([0-9\._]+).*Mobile.*Safari.*/],["safari",/Version\/([0-9\._]+).*Safari/]].filter(function(r){return r[1].test(e)}).map(function(r){var n=r[1].exec(e),o=n&&n[1].split(/[._]/).slice(0,3),t=Array.prototype.slice.call(o,1).join("")||"0";return o&&o.length<3&&Array.prototype.push.apply(o,1===o.length?[0,0]:[0]),{name:r[0],version:o.join("."),versionNumber:parseFloat(o[0]+"."+t)}}).shift()}var r,n,o,t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};return function(e){function i(e,r){return j.call(e,r)}function f(e,r){var n,o,t,i,f,u,s,l,c,p,a,d,y=r&&r.split("/"),m=w.map,h=m&&m["*"]||{};if(e){for(e=e.split("/"),f=e.length-1,w.nodeIdCompat&&S.test(e[f])&&(e[f]=e[f].replace(S,"")),"."===e[0].charAt(0)&&y&&(d=y.slice(0,y.length-1),e=d.concat(e)),c=0;c<e.length;c++)if("."===(a=e[c]))e.splice(c,1),c-=1;else if(".."===a){if(0===c||1===c&&".."===e[2]||".."===e[c-1])continue;c>0&&(e.splice(c-1,2),c-=2)}e=e.join("/")}if((y||h)&&m){for(n=e.split("/"),c=n.length;c>0;c-=1){if(o=n.slice(0,c).join("/"),y)for(p=y.length;p>0;p-=1)if((t=m[y.slice(0,p).join("/")])&&(t=t[o])){i=t,u=c;break}if(i)break;!s&&h&&h[o]&&(s=h[o],l=c)}!i&&s&&(i=s,u=l),i&&(n.splice(0,u,i),e=n.join("/"))}return e}function u(r,n){return function(){var o=A.call(arguments,0);return"string"!=typeof o[0]&&1===o.length&&o.push(null),m.apply(e,o.concat([r,n]))}}function s(e){return function(r){return f(r,e)}}function l(e){return function(r){v[e]=r}}function c(r){if(i(b,r)){var n=b[r];delete b[r],x[r]=!0,y.apply(e,n)}if(!i(v,r)&&!i(x,r))throw new Error("No "+r);return v[r]}function p(e){var r,n=e?e.indexOf("!"):-1;return n>-1&&(r=e.substring(0,n),e=e.substring(n+1,e.length)),[r,e]}function a(e){return e?p(e):[]}function d(e){return function(){return w&&w.config&&w.config[e]||{}}}var y,m,h,g,v={},b={},w={},x={},j=Object.prototype.hasOwnProperty,A=[].slice,S=/\.js$/;h=function(e,r){var n,o=p(e),t=o[0],i=r[1];return e=o[1],t&&(t=f(t,i),n=c(t)),t?e=n&&n.normalize?n.normalize(e,s(i)):f(e,i):(e=f(e,i),o=p(e),t=o[0],e=o[1],t&&(n=c(t))),{f:t?t+"!"+e:e,n:e,pr:t,p:n}},g={require:function(e){return u(e)},exports:function(e){var r=v[e];return void 0!==r?r:v[e]={}},module:function(e){return{id:e,uri:"",exports:v[e],config:d(e)}}},y=function(r,n,o,f){var s,p,d,y,m,w,j,A=[],S=void 0===o?"undefined":t(o);if(f=f||r,w=a(f),"undefined"===S||"function"===S){for(n=!n.length&&o.length?["require","exports","module"]:n,m=0;m<n.length;m+=1)if(y=h(n[m],w),"require"===(p=y.f))A[m]=g.require(r);else if("exports"===p)A[m]=g.exports(r),j=!0;else if("module"===p)s=A[m]=g.module(r);else if(i(v,p)||i(b,p)||i(x,p))A[m]=c(p);else{if(!y.p)throw new Error(r+" missing "+p);y.p.load(y.n,u(f,!0),l(p),{}),A[m]=v[p]}d=o?o.apply(v[r],A):void 0,r&&(s&&s.exports!==e&&s.exports!==v[r]?v[r]=s.exports:d===e&&j||(v[r]=d))}else r&&(v[r]=o)},r=n=m=function(r,n,o,t,i){if("string"==typeof r)return g[r]?g[r](n):c(h(r,a(n)).f);if(!r.splice){if(w=r,w.deps&&m(w.deps,w.callback),!n)return;n.splice?(r=n,n=o,o=null):r=e}return n=n||function(){},"function"==typeof o&&(o=t,t=i),t?y(e,r,n,o):setTimeout(function(){y(e,r,n,o)},4),m},m.config=function(e){return m(e)},r._defined=v,o=function(e,r,n){if("string"!=typeof e)throw new Error("See almond README: incorrect module build, no module name");r.splice||(n=r,r=[]),i(v,e)||i(b,e)||(b[e]=[e,r,n])},o.amd={jQuery:!0}}(),o("almond",function(){}),void 0===Array.prototype.map&&(Array.prototype.map=function(e){for(var r=[],n=0,o=this.length;n<o;n++)r.push(e(this[n]));return r}),void 0===Array.prototype.filter&&(Array.prototype.filter=function(e){for(var r=[],n=0,o=this.length;n<o;n++)e(this[n])&&r.push(this[n]);return r}),o("polyfills",function(){}),o("browser-detect",["polyfills"],function(){return e}),o("main",["browser-detect"],function(e){return function(r){var n;if(void 0===r){var o="undefined"!=typeof window?window.navigator:o;n=void 0===o?void 0:o.userAgent}else n=r;return e(n)}}),n("main")});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
